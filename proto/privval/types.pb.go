// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/privval/types.proto

package privval

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	keys "github.com/tendermint/tendermint/proto/crypto/keys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FilePVKey stores the immutable part of PrivValidator.
type FilePVKey struct {
	Address  []byte          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey   keys.PublicKey  `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key"`
	PrivKey  keys.PrivateKey `protobuf:"bytes,3,opt,name=priv_key,json=privKey,proto3" json:"priv_key"`
	FilePath string          `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (m *FilePVKey) Reset()      { *m = FilePVKey{} }
func (*FilePVKey) ProtoMessage() {}
func (*FilePVKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d74c406df3ad93, []int{0}
}
func (m *FilePVKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilePVKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilePVKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilePVKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePVKey.Merge(m, src)
}
func (m *FilePVKey) XXX_Size() int {
	return m.Size()
}
func (m *FilePVKey) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePVKey.DiscardUnknown(m)
}

var xxx_messageInfo_FilePVKey proto.InternalMessageInfo

func (m *FilePVKey) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *FilePVKey) GetPubKey() keys.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return keys.PublicKey{}
}

func (m *FilePVKey) GetPrivKey() keys.PrivateKey {
	if m != nil {
		return m.PrivKey
	}
	return keys.PrivateKey{}
}

func (m *FilePVKey) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

// FilePVLastSignState stores the mutable part of PrivValidator.
type FilePVLastSignState struct {
	Height    int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round     int64  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Step      int32  `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	SignBytes []byte `protobuf:"bytes,5,opt,name=sign_bytes,json=signBytes,proto3" json:"sign_bytes,omitempty"`
	FilePath  string `protobuf:"bytes,6,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (m *FilePVLastSignState) Reset()      { *m = FilePVLastSignState{} }
func (*FilePVLastSignState) ProtoMessage() {}
func (*FilePVLastSignState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d74c406df3ad93, []int{1}
}
func (m *FilePVLastSignState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilePVLastSignState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilePVLastSignState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilePVLastSignState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePVLastSignState.Merge(m, src)
}
func (m *FilePVLastSignState) XXX_Size() int {
	return m.Size()
}
func (m *FilePVLastSignState) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePVLastSignState.DiscardUnknown(m)
}

var xxx_messageInfo_FilePVLastSignState proto.InternalMessageInfo

func (m *FilePVLastSignState) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FilePVLastSignState) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *FilePVLastSignState) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *FilePVLastSignState) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *FilePVLastSignState) GetSignBytes() []byte {
	if m != nil {
		return m.SignBytes
	}
	return nil
}

func (m *FilePVLastSignState) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func init() {
	proto.RegisterType((*FilePVKey)(nil), "tendermint.proto.privval.FilePVKey")
	proto.RegisterType((*FilePVLastSignState)(nil), "tendermint.proto.privval.FilePVLastSignState")
}

func init() { proto.RegisterFile("proto/privval/types.proto", fileDescriptor_a9d74c406df3ad93) }

var fileDescriptor_a9d74c406df3ad93 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xbf, 0x6e, 0xd4, 0x30,
	0x18, 0x8f, 0xb9, 0x7f, 0x3d, 0xd3, 0xc9, 0x20, 0x14, 0x0a, 0x35, 0xa7, 0x0e, 0x70, 0x53, 0x22,
	0xc1, 0x1b, 0xdc, 0x50, 0x09, 0x95, 0xe1, 0x94, 0x4a, 0x0c, 0x2c, 0x27, 0xe7, 0xf2, 0x91, 0x58,
	0x4d, 0x13, 0xcb, 0xfe, 0x72, 0x92, 0x37, 0x1e, 0x81, 0xc7, 0x60, 0xe5, 0x2d, 0x3a, 0xde, 0x82,
	0xd4, 0x09, 0x71, 0xb9, 0x85, 0xb1, 0x8f, 0x80, 0xec, 0x14, 0xa5, 0x27, 0x06, 0xb6, 0xef, 0xf7,
	0xf3, 0xe7, 0xdf, 0x1f, 0xcb, 0xf4, 0xb9, 0xd2, 0x35, 0xd6, 0xb1, 0xd2, 0x72, 0xb3, 0x11, 0x65,
	0x8c, 0x56, 0x81, 0x89, 0x3c, 0xc7, 0x42, 0x84, 0x2a, 0x03, 0x7d, 0x2d, 0x2b, 0xec, 0x98, 0xe8,
	0x7e, 0xeb, 0xe4, 0x35, 0x16, 0x52, 0x67, 0x2b, 0x25, 0x34, 0xda, 0xb8, 0x13, 0xc8, 0xeb, 0xbc,
	0xee, 0xa7, 0x6e, 0xff, 0xe4, 0xb4, 0x63, 0xd6, 0xda, 0x2a, 0xac, 0xe3, 0x2b, 0xb0, 0xe6, 0xa1,
	0xc1, 0xd9, 0x0f, 0x42, 0xa7, 0xe7, 0xb2, 0x84, 0xe5, 0xc7, 0x0b, 0xb0, 0x2c, 0xa4, 0x13, 0x91,
	0x65, 0x1a, 0x8c, 0x09, 0xc9, 0x8c, 0xcc, 0x8f, 0x93, 0xbf, 0x90, 0x9d, 0xd3, 0x89, 0x6a, 0xd2,
	0xd5, 0x15, 0xd8, 0xf0, 0xd1, 0x8c, 0xcc, 0x1f, 0xbf, 0x7d, 0x13, 0xfd, 0x13, 0xad, 0xf3, 0x88,
	0x9c, 0x47, 0xb4, 0x6c, 0xd2, 0x52, 0xae, 0x2f, 0xc0, 0x2e, 0x86, 0x37, 0x3f, 0x5f, 0x05, 0xc9,
	0x58, 0x35, 0xa9, 0x73, 0x78, 0x4f, 0x8f, 0x5c, 0x03, 0x2f, 0x34, 0xf0, 0x42, 0xf3, 0xff, 0x08,
	0x69, 0xb9, 0x11, 0x08, 0xbd, 0xd2, 0xc4, 0xdd, 0x77, 0x52, 0x2f, 0xe8, 0xf4, 0xb3, 0x2c, 0x61,
	0xa5, 0x04, 0x16, 0xe1, 0x70, 0x46, 0xe6, 0xd3, 0xe4, 0xc8, 0x11, 0x4b, 0x81, 0xc5, 0xd9, 0x77,
	0x42, 0x9f, 0x74, 0xbd, 0x3e, 0x08, 0x83, 0x97, 0x32, 0xaf, 0x2e, 0x51, 0x20, 0xb0, 0x67, 0x74,
	0x5c, 0x80, 0xcc, 0x0b, 0xf4, 0x05, 0x07, 0xc9, 0x3d, 0x62, 0x4f, 0xe9, 0x48, 0xd7, 0x4d, 0x95,
	0xf9, 0x76, 0x83, 0xa4, 0x03, 0x8c, 0xd1, 0xa1, 0x41, 0x50, 0x3e, 0xe9, 0x28, 0xf1, 0x33, 0x7b,
	0x49, 0xa7, 0x46, 0xe6, 0x95, 0xc0, 0x46, 0x83, 0xb7, 0x3d, 0x4e, 0x7a, 0x82, 0x9d, 0x52, 0xea,
	0xc0, 0x2a, 0xb5, 0x08, 0x26, 0x1c, 0xf5, 0xc7, 0x0b, 0x47, 0x1c, 0x66, 0x1e, 0x1f, 0x66, 0x5e,
	0x64, 0xdb, 0x1d, 0x0f, 0x6e, 0x77, 0x3c, 0xb8, 0xdb, 0x71, 0xf2, 0xa5, 0xe5, 0xe4, 0x5b, 0xcb,
	0xc9, 0x4d, 0xcb, 0xc9, 0xb6, 0xe5, 0xe4, 0x57, 0xcb, 0xc9, 0xef, 0x96, 0x07, 0x77, 0x2d, 0x27,
	0x5f, 0xf7, 0x3c, 0xd8, 0xee, 0x79, 0x70, 0xbb, 0xe7, 0xc1, 0xa7, 0x28, 0x97, 0x58, 0x34, 0x69,
	0xb4, 0xae, 0xaf, 0xe3, 0xfe, 0x25, 0x1f, 0x8e, 0x07, 0xdf, 0x2b, 0x1d, 0x7b, 0xf8, 0xee, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0x64, 0xf4, 0xa2, 0x76, 0x02, 0x00, 0x00,
}

func (this *FilePVKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilePVKey)
	if !ok {
		that2, ok := that.(FilePVKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !this.PubKey.Equal(&that1.PubKey) {
		return false
	}
	if !this.PrivKey.Equal(&that1.PrivKey) {
		return false
	}
	if this.FilePath != that1.FilePath {
		return false
	}
	return true
}
func (this *FilePVLastSignState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilePVLastSignState)
	if !ok {
		that2, ok := that.(FilePVLastSignState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.SignBytes, that1.SignBytes) {
		return false
	}
	if this.FilePath != that1.FilePath {
		return false
	}
	return true
}
func (this *FilePVKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&privval.FilePVKey{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "PubKey: "+strings.Replace(this.PubKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "PrivKey: "+strings.Replace(this.PrivKey.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilePVLastSignState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&privval.FilePVLastSignState{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "SignBytes: "+fmt.Sprintf("%#v", this.SignBytes)+",\n")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FilePVKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilePVKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePVKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.PrivKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilePVLastSignState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilePVLastSignState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePVLastSignState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SignBytes) > 0 {
		i -= len(m.SignBytes)
		copy(dAtA[i:], m.SignBytes)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SignBytes)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.Step != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FilePVKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.PubKey.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.PrivKey.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *FilePVLastSignState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovTypes(uint64(m.Round))
	}
	if m.Step != 0 {
		n += 1 + sovTypes(uint64(m.Step))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.SignBytes)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FilePVKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilePVKey{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`PubKey:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PubKey), "PublicKey", "keys.PublicKey", 1), `&`, ``, 1) + `,`,
		`PrivKey:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PrivKey), "PrivateKey", "keys.PrivateKey", 1), `&`, ``, 1) + `,`,
		`FilePath:` + fmt.Sprintf("%v", this.FilePath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilePVLastSignState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilePVLastSignState{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`SignBytes:` + fmt.Sprintf("%v", this.SignBytes) + `,`,
		`FilePath:` + fmt.Sprintf("%v", this.FilePath) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FilePVKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilePVKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilePVKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrivKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilePVLastSignState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilePVLastSignState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilePVLastSignState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignBytes = append(m.SignBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignBytes == nil {
				m.SignBytes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
