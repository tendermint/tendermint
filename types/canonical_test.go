package types

import (
	"testing"

	"github.com/stretchr/testify/require"
	tmproto "github.com/tendermint/tendermint/proto/types"
)

func TestCanonicalVoteBytesTestVectors(t *testing.T) {

	tests := []struct {
		cvote *tmproto.CanonicalVote
		want  []byte
	}{
		0: {
			&tmproto.CanonicalVote{},
			[]byte{34, 2, 18, 0, 42, 11, 8, 128, 146, 184, 195, 152, 254, 255, 255, 255, 1},
		},
		// with proper (fixed size) height and round (PreCommit):
		1: {
			&tmproto.CanonicalVote{Height: 1, Round: 1, Type: tmproto.PrecommitType},
			[]byte{8, 2, 17, 1, 0, 0, 0, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 0, 0, 0, 34, 2, 18, 0, 42, 11, 8,
				128, 146, 184, 195, 152, 254, 255, 255, 255, 1},
		},
		// // with proper (fixed size) height and round (PreVote):
		// 2: {
		// 	&tmproto.CanonicalVote{Height: 1, Round: 1, Type: tmproto.PrevoteType, Timestamp: time.Now()},
		// 	[]byte{0x8, 0x1, 0x11, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		// 		0x22, 0x2, 0x12, 0x0, 0x2a, 0xb, 0x8, 0x80, 0x92, 0xb8, 0xc3, 0x98, 0xfe, 0xff, 0xff, 0xff, 0x1},
		// },
		// 3: {
		// 	&tmproto.CanonicalVote{Height: 1, Round: 1, ChainID: "test-chain-ID"},
		// 	[]byte{0x11, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22,
		// 		0x2, 0x12, 0x0, 0x2a, 0xb, 0x8, 0x80, 0x92, 0xb8, 0xc3, 0x98, 0xfe, 0xff, 0xff, 0xff, 0x1},
		// },
		// // containing non-empty chain_id:
		// 4: {
		// 	&tmproto.CanonicalVote{Height: 1, Round: 1},
		// 	[]byte{0x11, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22,
		// 		0x2, 0x12, 0x0, 0x2a, 0xb, 0x8, 0x80, 0x92, 0xb8, 0xc3, 0x98, 0xfe, 0xff, 0xff, 0xff, 0x1, 0x32, 0xd, 0x74,
		// 		0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64},
		// },
	}
	for i, tc := range tests {
		got, err := tc.cvote.Marshal()
		require.NoError(t, err)
		require.Equal(t, tc.want, got, "test case #%v: got unexpected sign bytes for Vote.", i)
	}
}
