---
- hosts:
    - tok0
    - tok1
    - tok2
    - tok3
    - tak0
  become: yes
  vars:
    loadtest_user: "loadtest"
    loadtest_group: "loadtest"
    loadtest_home: "/home/{{ loadtest_user }}"
    venv_dir: "{{ loadtest_home }}/venv"
    loadtest_master_node: tok0
    loadtest_master_hostname: 172.31.6.229     # Use internal IP of host as ports are blocked externally
    expected_slave_count: 4
    force_update_venv: no
    fast_mode: no
    results_output_dir: "/tmp/003-kvstore-loadtest-distributed"

    # Locust configuration parameters
    target_hosts:
      - "http://tik0.sredev.co:26657"
      - "http://tik1.sredev.co:26657"
      - "http://tik2.sredev.co:26657"
      - "http://tik3.sredev.co:26657"
    target_hosts_str: "{{ target_hosts | join('::') }}"
    csv_output_file: "{{ loadtest_home }}/loadtest"
    num_clients: 1000
    hatch_rate: 20
    run_time: 5m
    log_file: "{{ loadtest_home }}/loadtest.log"
    stdout_file: "{{ loadtest_home }}/loadtest.stdout.log"
  tasks:
    - name: Check if Tendermint service is present
      stat: "path=/etc/systemd/system/tendermint.service"
      register: tm_service
      when: (not fast_mode)
    - name: Stop Tendermint if service is present
      service: name=tendermint state=stopped
      when: (not fast_mode) and tm_service.stat.exists
    
    # Check if the virtual environment exists on the target machine
    - name: Check if the virtual environment folder exists
      stat: "path={{ venv_dir }}"
      register: venv
      when: (not fast_mode)
    - name: Configure virtual environment if not present
      include_tasks: venv.yml
      when: (not fast_mode) and (force_update_venv or not venv.stat.exists)
    
    - name: Copy the necessary scripts across
      copy: "src={{ item }} dest={{ loadtest_home }}"
      with_items:
        - "locust_file.py"
        - "execute_load_test.sh"
      when: (not fast_mode)
    - name: Configure the permissions for the loadtest user home folder
      file:
        path: "{{ loadtest_home }}"
        owner: "{{ loadtest_user }}"
        group: "{{ loadtest_group }}"
      when: (not fast_mode)
    - name: Configure executable permissions for load test execution script
      file:
        path: "{{ loadtest_home }}/execute_load_test.sh"
        mode: 0755
      when: (not fast_mode)
    - name: Clear out existing log/statistics files, if they exist
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ csv_output_file }}_distribution.csv"
        - "{{ csv_output_file }}_requests.csv"
        - "{{ log_file }}"
        - "{{ stdout_file }}"
    
    - name: Execute the load test
      shell: |
        INVENTORY_HOSTNAME={{ inventory_hostname }} \
          TARGET_HOSTS={{ target_hosts_str }} \
          CSV_OUTPUT_FILE={{ csv_output_file }} \
          NUM_CLIENTS={{ num_clients }} \
          HATCH_RATE={{ hatch_rate }} \
          RUN_TIME={{ run_time }} \
          LOG_FILE={{ log_file }} \
          STDOUT_FILE={{ stdout_file }} \
          EXPECTED_SLAVE_COUNT={{ expected_slave_count }} \
          LOADTEST_MASTER_NODE={{ loadtest_master_node }} \
          LOADTEST_MASTER_HOSTNAME={{ loadtest_master_hostname }} \
          ./execute_load_test.sh
      args:
        chdir: "{{ loadtest_home }}"
      ignore_errors: yes

    - name: "Fetch the load test result files"
      fetch:
        src: "{{ item }}"
        dest: "{{ results_output_dir }}/{{ inventory_hostname }}/"
        flat: yes
        fail_on_missing: no
      with_items:
        - "{{ csv_output_file }}_distribution.csv"
        - "{{ csv_output_file }}_requests.csv"
        - "{{ log_file }}"
        - "{{ stdout_file }}"
